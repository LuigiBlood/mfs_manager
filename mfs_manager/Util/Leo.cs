using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace mfs_manager
{
    static class Leo
    {
        public const int MAX_LBA = 0x10DB;
        public const int SIZE_LBA = MAX_LBA + 1;
        public const int SYSTEM_LBAS = 24;
        public const int DISKID_LBA = 14;

        const int SECTORS_PER_BLOCK = 85;

        /* Sector Size in bytes [zone] */
        static readonly int[] SECTOR_SIZE = { 232, 216, 208, 192, 176, 160, 144, 128, 112 };

        /* Block Size in bytes [zone] */
        public static readonly int[] BLOCK_SIZE = { 0x4D08, 0x47B8, 0x4510, 0x3FC0, 0x3A70, 0x3520, 0x2FD0, 0x2A80, 0x2530 };

        /* LBA to VZone [type,vzone] */
        static readonly int[,] VZONE_LBA_TBL = {
            {0x0124, 0x0248, 0x035A, 0x047E, 0x05A2, 0x06B4, 0x07C6, 0x08D8, 0x09EA, 0x0AB6, 0x0B82, 0x0C94, 0x0DA6, 0x0EB8, 0x0FCA, 0x10DC},
            {0x0124, 0x0248, 0x035A, 0x046C, 0x057E, 0x06A2, 0x07C6, 0x08D8, 0x09EA, 0x0AFC, 0x0BC8, 0x0C94, 0x0DA6, 0x0EB8, 0x0FCA, 0x10DC},
            {0x0124, 0x0248, 0x035A, 0x046C, 0x057E, 0x0690, 0x07A2, 0x08C6, 0x09EA, 0x0AFC, 0x0C0E, 0x0CDA, 0x0DA6, 0x0EB8, 0x0FCA, 0x10DC},
            {0x0124, 0x0248, 0x035A, 0x046C, 0x057E, 0x0690, 0x07A2, 0x08B4, 0x09C6, 0x0AEA, 0x0C0E, 0x0D20, 0x0DEC, 0x0EB8, 0x0FCA, 0x10DC},
            {0x0124, 0x0248, 0x035A, 0x046C, 0x057E, 0x0690, 0x07A2, 0x08B4, 0x09C6, 0x0AD8, 0x0BEA, 0x0D0E, 0x0E32, 0x0EFE, 0x0FCA, 0x10DC},
            {0x0124, 0x0248, 0x035A, 0x046C, 0x057E, 0x0690, 0x07A2, 0x086E, 0x0980, 0x0A92, 0x0BA4, 0x0CB6, 0x0DC8, 0x0EEC, 0x1010, 0x10DC},
            {0x0124, 0x0248, 0x035A, 0x046C, 0x057E, 0x0690, 0x07A2, 0x086E, 0x093A, 0x0A4C, 0x0B5E, 0x0C70, 0x0D82, 0x0E94, 0x0FB8, 0x10DC}
        };

        /* VZone to PZone [type,vzone] */
        static readonly int[,] VZONE_PZONE_TBL = {
            {0x0, 0x1, 0x2, 0x9, 0x8, 0x3, 0x4, 0x5, 0x6, 0x7, 0xF, 0xE, 0xD, 0xC, 0xB, 0xA},
            {0x0, 0x1, 0x2, 0x3, 0xA, 0x9, 0x8, 0x4, 0x5, 0x6, 0x7, 0xF, 0xE, 0xD, 0xC, 0xB},
            {0x0, 0x1, 0x2, 0x3, 0x4, 0xB, 0xA, 0x9, 0x8, 0x5, 0x6, 0x7, 0xF, 0xE, 0xD, 0xC},
            {0x0, 0x1, 0x2, 0x3, 0x4, 0x5, 0xC, 0xB, 0xA, 0x9, 0x8, 0x6, 0x7, 0xF, 0xE, 0xD},
            {0x0, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0xD, 0xC, 0xB, 0xA, 0x9, 0x8, 0x7, 0xF, 0xE},
            {0x0, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0xE, 0xD, 0xC, 0xB, 0xA, 0x9, 0x8, 0xF},
            {0x0, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0xF, 0xE, 0xD, 0xC, 0xB, 0xA, 0x9, 0x8}
        };

        /* LBA Start RAM Area [type] */
        public static readonly short[] RamStartLBA = { 0x5A2, 0x7C6, 0x9EA, 0xC0E, 0xE32, 0x1010, 0x10DC };

        /* RAM Area Total Sizes [type] */
        public static readonly int[] RamSize = { 0x24A9DC0, 0x1C226C0, 0x1450F00, 0xD35680, 0x6CFD40, 0x1DA240, 0x0 };

        /* LBA To Virtual Zone */
        public static int LBAToVZone(int lba, int disktype)
        {
            for (int vzone = 0; vzone < 16; vzone++)
            {
                if (lba < VZONE_LBA_TBL[disktype,vzone])
                {
                    return vzone;
                }
            }
            return -1;
        }

        /* Virtual Zone to Physical Zone */
        public static int VZoneToPZone(int vzone, int disktype) { return VZONE_PZONE_TBL[disktype, vzone]; }

        /* Calculate byte size from LBA x to LBA x+y */
        public static int LBAToByte(int disktype, int startlba, int nlbas)
        {
            int totalbytes = 0;
            bool init_flag = true;
            int vzone = 1;
            int pzone = 0;
            int lba = startlba;
            int lba_count = nlbas;
            int blkbytes = 0;
            if (nlbas != 0)
            {
                for (; lba_count != 0; lba_count--)
                {
                    if ((init_flag) || (VZONE_LBA_TBL[disktype, vzone] == lba))
                    {
                        vzone = LBAToVZone(lba, disktype);
                        pzone = VZoneToPZone(vzone, disktype);
                        if (7 < pzone)
                        {
                            pzone -= 7;
                        }
                        blkbytes = BLOCK_SIZE[pzone];
                    }
                    totalbytes += blkbytes;
                    lba++;
                    init_flag = false;
                    if ((lba_count != 0) && (lba > MAX_LBA))
                    {
                        return -1;
                    }
                }
            }
            return totalbytes;
        }
    }
}
